<?php

/**
 * Base class that represents a row from the 'stat_money_daily' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Wed Jun  1 18:48:14 2011
 *
 * @package    lib.model.om
 */
abstract class BaseStatMoneyDaily extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        StatMoneyDailyPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the date field.
	 * @var        string
	 */
	protected $date;

	/**
	 * The value for the turnover field.
	 * @var        int
	 */
	protected $turnover;

	/**
	 * The value for the turnover_points field.
	 * @var        int
	 */
	protected $turnover_points;

	/**
	 * The value for the revenue field.
	 * @var        int
	 */
	protected $revenue;

	/**
	 * The value for the revenue_points field.
	 * @var        int
	 */
	protected $revenue_points;

	/**
	 * The value for the pay_count field.
	 * @var        int
	 */
	protected $pay_count;

	/**
	 * The value for the avg_check field.
	 * @var        double
	 */
	protected $avg_check;

	/**
	 * The value for the avg_check_points field.
	 * @var        double
	 */
	protected $avg_check_points;

	/**
	 * The value for the incoming_funds field.
	 * @var        int
	 */
	protected $incoming_funds;

	/**
	 * The value for the incoming_funds_points field.
	 * @var        int
	 */
	protected $incoming_funds_points;

	/**
	 * The value for the outgoing_funds field.
	 * @var        int
	 */
	protected $outgoing_funds;

	/**
	 * The value for the outgoing_funds_points field.
	 * @var        int
	 */
	protected $outgoing_funds_points;

	/**
	 * The value for the diff_funds field.
	 * @var        int
	 */
	protected $diff_funds;

	/**
	 * The value for the diff_funds_points field.
	 * @var        int
	 */
	protected $diff_funds_points;

	/**
	 * The value for the avg_agent_revenue field.
	 * @var        double
	 */
	protected $avg_agent_revenue;

	/**
	 * The value for the avg_agent_revenue_points field.
	 * @var        double
	 */
	protected $avg_agent_revenue_points;

	/**
	 * The value for the avg_advert_cost field.
	 * @var        double
	 */
	protected $avg_advert_cost;

	/**
	 * The value for the avg_advert_cost_points field.
	 * @var        double
	 */
	protected $avg_advert_cost_points;

	/**
	 * The value for the avg_active_agent_revernue field.
	 * @var        double
	 */
	protected $avg_active_agent_revernue;

	/**
	 * The value for the avg_active_agent_revenue_points field.
	 * @var        double
	 */
	protected $avg_active_agent_revenue_points;

	/**
	 * The value for the avg_active_advert_cost field.
	 * @var        double
	 */
	protected $avg_active_advert_cost;

	/**
	 * The value for the avg_active_advert_cost_points field.
	 * @var        double
	 */
	protected $avg_active_advert_cost_points;

	/**
	 * The value for the avg_click_cost field.
	 * @var        double
	 */
	protected $avg_click_cost;

	/**
	 * The value for the avg_click_cost_points field.
	 * @var        double
	 */
	protected $avg_click_cost_points;

	/**
	 * The value for the avg_click_revenue field.
	 * @var        double
	 */
	protected $avg_click_revenue;

	/**
	 * The value for the avg_click_revenue_points field.
	 * @var        double
	 */
	protected $avg_click_revenue_points;

	/**
	 * The value for the arpu field.
	 * @var        double
	 */
	protected $arpu;

	/**
	 * The value for the arpu_points field.
	 * @var        double
	 */
	protected $arpu_points;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'StatMoneyDailyPeer';

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [optionally formatted] temporal [date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDate($format = 'Y-m-d')
	{
		if ($this->date === null) {
			return null;
		}


		if ($this->date === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [turnover] column value.
	 * 
	 * @return     int
	 */
	public function getTurnover()
	{
		return $this->turnover;
	}

	/**
	 * Get the [turnover_points] column value.
	 * 
	 * @return     int
	 */
	public function getTurnoverPoints()
	{
		return $this->turnover_points;
	}

	/**
	 * Get the [revenue] column value.
	 * 
	 * @return     int
	 */
	public function getRevenue()
	{
		return $this->revenue;
	}

	/**
	 * Get the [revenue_points] column value.
	 * 
	 * @return     int
	 */
	public function getRevenuePoints()
	{
		return $this->revenue_points;
	}

	/**
	 * Get the [pay_count] column value.
	 * 
	 * @return     int
	 */
	public function getPayCount()
	{
		return $this->pay_count;
	}

	/**
	 * Get the [avg_check] column value.
	 * 
	 * @return     double
	 */
	public function getAvgCheck()
	{
		return $this->avg_check;
	}

	/**
	 * Get the [avg_check_points] column value.
	 * 
	 * @return     double
	 */
	public function getAvgCheckPoints()
	{
		return $this->avg_check_points;
	}

	/**
	 * Get the [incoming_funds] column value.
	 * 
	 * @return     int
	 */
	public function getIncomingFunds()
	{
		return $this->incoming_funds;
	}

	/**
	 * Get the [incoming_funds_points] column value.
	 * 
	 * @return     int
	 */
	public function getIncomingFundsPoints()
	{
		return $this->incoming_funds_points;
	}

	/**
	 * Get the [outgoing_funds] column value.
	 * 
	 * @return     int
	 */
	public function getOutgoingFunds()
	{
		return $this->outgoing_funds;
	}

	/**
	 * Get the [outgoing_funds_points] column value.
	 * 
	 * @return     int
	 */
	public function getOutgoingFundsPoints()
	{
		return $this->outgoing_funds_points;
	}

	/**
	 * Get the [diff_funds] column value.
	 * 
	 * @return     int
	 */
	public function getDiffFunds()
	{
		return $this->diff_funds;
	}

	/**
	 * Get the [diff_funds_points] column value.
	 * 
	 * @return     int
	 */
	public function getDiffFundsPoints()
	{
		return $this->diff_funds_points;
	}

	/**
	 * Get the [avg_agent_revenue] column value.
	 * 
	 * @return     double
	 */
	public function getAvgAgentRevenue()
	{
		return $this->avg_agent_revenue;
	}

	/**
	 * Get the [avg_agent_revenue_points] column value.
	 * 
	 * @return     double
	 */
	public function getAvgAgentRevenuePoints()
	{
		return $this->avg_agent_revenue_points;
	}

	/**
	 * Get the [avg_advert_cost] column value.
	 * 
	 * @return     double
	 */
	public function getAvgAdvertCost()
	{
		return $this->avg_advert_cost;
	}

	/**
	 * Get the [avg_advert_cost_points] column value.
	 * 
	 * @return     double
	 */
	public function getAvgAdvertCostPoints()
	{
		return $this->avg_advert_cost_points;
	}

	/**
	 * Get the [avg_active_agent_revernue] column value.
	 * 
	 * @return     double
	 */
	public function getAvgActiveAgentRevernue()
	{
		return $this->avg_active_agent_revernue;
	}

	/**
	 * Get the [avg_active_agent_revenue_points] column value.
	 * 
	 * @return     double
	 */
	public function getAvgActiveAgentRevenuePoints()
	{
		return $this->avg_active_agent_revenue_points;
	}

	/**
	 * Get the [avg_active_advert_cost] column value.
	 * 
	 * @return     double
	 */
	public function getAvgActiveAdvertCost()
	{
		return $this->avg_active_advert_cost;
	}

	/**
	 * Get the [avg_active_advert_cost_points] column value.
	 * 
	 * @return     double
	 */
	public function getAvgActiveAdvertCostPoints()
	{
		return $this->avg_active_advert_cost_points;
	}

	/**
	 * Get the [avg_click_cost] column value.
	 * 
	 * @return     double
	 */
	public function getAvgClickCost()
	{
		return $this->avg_click_cost;
	}

	/**
	 * Get the [avg_click_cost_points] column value.
	 * 
	 * @return     double
	 */
	public function getAvgClickCostPoints()
	{
		return $this->avg_click_cost_points;
	}

	/**
	 * Get the [avg_click_revenue] column value.
	 * 
	 * @return     double
	 */
	public function getAvgClickRevenue()
	{
		return $this->avg_click_revenue;
	}

	/**
	 * Get the [avg_click_revenue_points] column value.
	 * 
	 * @return     double
	 */
	public function getAvgClickRevenuePoints()
	{
		return $this->avg_click_revenue_points;
	}

	/**
	 * Get the [arpu] column value.
	 * 
	 * @return     double
	 */
	public function getArpu()
	{
		return $this->arpu;
	}

	/**
	 * Get the [arpu_points] column value.
	 * 
	 * @return     double
	 */
	public function getArpuPoints()
	{
		return $this->arpu_points;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     StatMoneyDaily The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = StatMoneyDailyPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Sets the value of [date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     StatMoneyDaily The current object (for fluent API support)
	 */
	public function setDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->date !== null && $tmpDt = new DateTime($this->date)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->date = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = StatMoneyDailyPeer::DATE;
			}
		} // if either are not null

		return $this;
	} // setDate()

	/**
	 * Set the value of [turnover] column.
	 * 
	 * @param      int $v new value
	 * @return     StatMoneyDaily The current object (for fluent API support)
	 */
	public function setTurnover($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->turnover !== $v) {
			$this->turnover = $v;
			$this->modifiedColumns[] = StatMoneyDailyPeer::TURNOVER;
		}

		return $this;
	} // setTurnover()

	/**
	 * Set the value of [turnover_points] column.
	 * 
	 * @param      int $v new value
	 * @return     StatMoneyDaily The current object (for fluent API support)
	 */
	public function setTurnoverPoints($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->turnover_points !== $v) {
			$this->turnover_points = $v;
			$this->modifiedColumns[] = StatMoneyDailyPeer::TURNOVER_POINTS;
		}

		return $this;
	} // setTurnoverPoints()

	/**
	 * Set the value of [revenue] column.
	 * 
	 * @param      int $v new value
	 * @return     StatMoneyDaily The current object (for fluent API support)
	 */
	public function setRevenue($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->revenue !== $v) {
			$this->revenue = $v;
			$this->modifiedColumns[] = StatMoneyDailyPeer::REVENUE;
		}

		return $this;
	} // setRevenue()

	/**
	 * Set the value of [revenue_points] column.
	 * 
	 * @param      int $v new value
	 * @return     StatMoneyDaily The current object (for fluent API support)
	 */
	public function setRevenuePoints($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->revenue_points !== $v) {
			$this->revenue_points = $v;
			$this->modifiedColumns[] = StatMoneyDailyPeer::REVENUE_POINTS;
		}

		return $this;
	} // setRevenuePoints()

	/**
	 * Set the value of [pay_count] column.
	 * 
	 * @param      int $v new value
	 * @return     StatMoneyDaily The current object (for fluent API support)
	 */
	public function setPayCount($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->pay_count !== $v) {
			$this->pay_count = $v;
			$this->modifiedColumns[] = StatMoneyDailyPeer::PAY_COUNT;
		}

		return $this;
	} // setPayCount()

	/**
	 * Set the value of [avg_check] column.
	 * 
	 * @param      double $v new value
	 * @return     StatMoneyDaily The current object (for fluent API support)
	 */
	public function setAvgCheck($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->avg_check !== $v) {
			$this->avg_check = $v;
			$this->modifiedColumns[] = StatMoneyDailyPeer::AVG_CHECK;
		}

		return $this;
	} // setAvgCheck()

	/**
	 * Set the value of [avg_check_points] column.
	 * 
	 * @param      double $v new value
	 * @return     StatMoneyDaily The current object (for fluent API support)
	 */
	public function setAvgCheckPoints($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->avg_check_points !== $v) {
			$this->avg_check_points = $v;
			$this->modifiedColumns[] = StatMoneyDailyPeer::AVG_CHECK_POINTS;
		}

		return $this;
	} // setAvgCheckPoints()

	/**
	 * Set the value of [incoming_funds] column.
	 * 
	 * @param      int $v new value
	 * @return     StatMoneyDaily The current object (for fluent API support)
	 */
	public function setIncomingFunds($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->incoming_funds !== $v) {
			$this->incoming_funds = $v;
			$this->modifiedColumns[] = StatMoneyDailyPeer::INCOMING_FUNDS;
		}

		return $this;
	} // setIncomingFunds()

	/**
	 * Set the value of [incoming_funds_points] column.
	 * 
	 * @param      int $v new value
	 * @return     StatMoneyDaily The current object (for fluent API support)
	 */
	public function setIncomingFundsPoints($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->incoming_funds_points !== $v) {
			$this->incoming_funds_points = $v;
			$this->modifiedColumns[] = StatMoneyDailyPeer::INCOMING_FUNDS_POINTS;
		}

		return $this;
	} // setIncomingFundsPoints()

	/**
	 * Set the value of [outgoing_funds] column.
	 * 
	 * @param      int $v new value
	 * @return     StatMoneyDaily The current object (for fluent API support)
	 */
	public function setOutgoingFunds($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->outgoing_funds !== $v) {
			$this->outgoing_funds = $v;
			$this->modifiedColumns[] = StatMoneyDailyPeer::OUTGOING_FUNDS;
		}

		return $this;
	} // setOutgoingFunds()

	/**
	 * Set the value of [outgoing_funds_points] column.
	 * 
	 * @param      int $v new value
	 * @return     StatMoneyDaily The current object (for fluent API support)
	 */
	public function setOutgoingFundsPoints($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->outgoing_funds_points !== $v) {
			$this->outgoing_funds_points = $v;
			$this->modifiedColumns[] = StatMoneyDailyPeer::OUTGOING_FUNDS_POINTS;
		}

		return $this;
	} // setOutgoingFundsPoints()

	/**
	 * Set the value of [diff_funds] column.
	 * 
	 * @param      int $v new value
	 * @return     StatMoneyDaily The current object (for fluent API support)
	 */
	public function setDiffFunds($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->diff_funds !== $v) {
			$this->diff_funds = $v;
			$this->modifiedColumns[] = StatMoneyDailyPeer::DIFF_FUNDS;
		}

		return $this;
	} // setDiffFunds()

	/**
	 * Set the value of [diff_funds_points] column.
	 * 
	 * @param      int $v new value
	 * @return     StatMoneyDaily The current object (for fluent API support)
	 */
	public function setDiffFundsPoints($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->diff_funds_points !== $v) {
			$this->diff_funds_points = $v;
			$this->modifiedColumns[] = StatMoneyDailyPeer::DIFF_FUNDS_POINTS;
		}

		return $this;
	} // setDiffFundsPoints()

	/**
	 * Set the value of [avg_agent_revenue] column.
	 * 
	 * @param      double $v new value
	 * @return     StatMoneyDaily The current object (for fluent API support)
	 */
	public function setAvgAgentRevenue($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->avg_agent_revenue !== $v) {
			$this->avg_agent_revenue = $v;
			$this->modifiedColumns[] = StatMoneyDailyPeer::AVG_AGENT_REVENUE;
		}

		return $this;
	} // setAvgAgentRevenue()

	/**
	 * Set the value of [avg_agent_revenue_points] column.
	 * 
	 * @param      double $v new value
	 * @return     StatMoneyDaily The current object (for fluent API support)
	 */
	public function setAvgAgentRevenuePoints($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->avg_agent_revenue_points !== $v) {
			$this->avg_agent_revenue_points = $v;
			$this->modifiedColumns[] = StatMoneyDailyPeer::AVG_AGENT_REVENUE_POINTS;
		}

		return $this;
	} // setAvgAgentRevenuePoints()

	/**
	 * Set the value of [avg_advert_cost] column.
	 * 
	 * @param      double $v new value
	 * @return     StatMoneyDaily The current object (for fluent API support)
	 */
	public function setAvgAdvertCost($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->avg_advert_cost !== $v) {
			$this->avg_advert_cost = $v;
			$this->modifiedColumns[] = StatMoneyDailyPeer::AVG_ADVERT_COST;
		}

		return $this;
	} // setAvgAdvertCost()

	/**
	 * Set the value of [avg_advert_cost_points] column.
	 * 
	 * @param      double $v new value
	 * @return     StatMoneyDaily The current object (for fluent API support)
	 */
	public function setAvgAdvertCostPoints($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->avg_advert_cost_points !== $v) {
			$this->avg_advert_cost_points = $v;
			$this->modifiedColumns[] = StatMoneyDailyPeer::AVG_ADVERT_COST_POINTS;
		}

		return $this;
	} // setAvgAdvertCostPoints()

	/**
	 * Set the value of [avg_active_agent_revernue] column.
	 * 
	 * @param      double $v new value
	 * @return     StatMoneyDaily The current object (for fluent API support)
	 */
	public function setAvgActiveAgentRevernue($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->avg_active_agent_revernue !== $v) {
			$this->avg_active_agent_revernue = $v;
			$this->modifiedColumns[] = StatMoneyDailyPeer::AVG_ACTIVE_AGENT_REVERNUE;
		}

		return $this;
	} // setAvgActiveAgentRevernue()

	/**
	 * Set the value of [avg_active_agent_revenue_points] column.
	 * 
	 * @param      double $v new value
	 * @return     StatMoneyDaily The current object (for fluent API support)
	 */
	public function setAvgActiveAgentRevenuePoints($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->avg_active_agent_revenue_points !== $v) {
			$this->avg_active_agent_revenue_points = $v;
			$this->modifiedColumns[] = StatMoneyDailyPeer::AVG_ACTIVE_AGENT_REVENUE_POINTS;
		}

		return $this;
	} // setAvgActiveAgentRevenuePoints()

	/**
	 * Set the value of [avg_active_advert_cost] column.
	 * 
	 * @param      double $v new value
	 * @return     StatMoneyDaily The current object (for fluent API support)
	 */
	public function setAvgActiveAdvertCost($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->avg_active_advert_cost !== $v) {
			$this->avg_active_advert_cost = $v;
			$this->modifiedColumns[] = StatMoneyDailyPeer::AVG_ACTIVE_ADVERT_COST;
		}

		return $this;
	} // setAvgActiveAdvertCost()

	/**
	 * Set the value of [avg_active_advert_cost_points] column.
	 * 
	 * @param      double $v new value
	 * @return     StatMoneyDaily The current object (for fluent API support)
	 */
	public function setAvgActiveAdvertCostPoints($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->avg_active_advert_cost_points !== $v) {
			$this->avg_active_advert_cost_points = $v;
			$this->modifiedColumns[] = StatMoneyDailyPeer::AVG_ACTIVE_ADVERT_COST_POINTS;
		}

		return $this;
	} // setAvgActiveAdvertCostPoints()

	/**
	 * Set the value of [avg_click_cost] column.
	 * 
	 * @param      double $v new value
	 * @return     StatMoneyDaily The current object (for fluent API support)
	 */
	public function setAvgClickCost($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->avg_click_cost !== $v) {
			$this->avg_click_cost = $v;
			$this->modifiedColumns[] = StatMoneyDailyPeer::AVG_CLICK_COST;
		}

		return $this;
	} // setAvgClickCost()

	/**
	 * Set the value of [avg_click_cost_points] column.
	 * 
	 * @param      double $v new value
	 * @return     StatMoneyDaily The current object (for fluent API support)
	 */
	public function setAvgClickCostPoints($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->avg_click_cost_points !== $v) {
			$this->avg_click_cost_points = $v;
			$this->modifiedColumns[] = StatMoneyDailyPeer::AVG_CLICK_COST_POINTS;
		}

		return $this;
	} // setAvgClickCostPoints()

	/**
	 * Set the value of [avg_click_revenue] column.
	 * 
	 * @param      double $v new value
	 * @return     StatMoneyDaily The current object (for fluent API support)
	 */
	public function setAvgClickRevenue($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->avg_click_revenue !== $v) {
			$this->avg_click_revenue = $v;
			$this->modifiedColumns[] = StatMoneyDailyPeer::AVG_CLICK_REVENUE;
		}

		return $this;
	} // setAvgClickRevenue()

	/**
	 * Set the value of [avg_click_revenue_points] column.
	 * 
	 * @param      double $v new value
	 * @return     StatMoneyDaily The current object (for fluent API support)
	 */
	public function setAvgClickRevenuePoints($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->avg_click_revenue_points !== $v) {
			$this->avg_click_revenue_points = $v;
			$this->modifiedColumns[] = StatMoneyDailyPeer::AVG_CLICK_REVENUE_POINTS;
		}

		return $this;
	} // setAvgClickRevenuePoints()

	/**
	 * Set the value of [arpu] column.
	 * 
	 * @param      double $v new value
	 * @return     StatMoneyDaily The current object (for fluent API support)
	 */
	public function setArpu($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->arpu !== $v) {
			$this->arpu = $v;
			$this->modifiedColumns[] = StatMoneyDailyPeer::ARPU;
		}

		return $this;
	} // setArpu()

	/**
	 * Set the value of [arpu_points] column.
	 * 
	 * @param      double $v new value
	 * @return     StatMoneyDaily The current object (for fluent API support)
	 */
	public function setArpuPoints($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->arpu_points !== $v) {
			$this->arpu_points = $v;
			$this->modifiedColumns[] = StatMoneyDailyPeer::ARPU_POINTS;
		}

		return $this;
	} // setArpuPoints()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->date = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->turnover = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->turnover_points = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->revenue = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
			$this->revenue_points = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
			$this->pay_count = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->avg_check = ($row[$startcol + 7] !== null) ? (double) $row[$startcol + 7] : null;
			$this->avg_check_points = ($row[$startcol + 8] !== null) ? (double) $row[$startcol + 8] : null;
			$this->incoming_funds = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->incoming_funds_points = ($row[$startcol + 10] !== null) ? (int) $row[$startcol + 10] : null;
			$this->outgoing_funds = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
			$this->outgoing_funds_points = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
			$this->diff_funds = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
			$this->diff_funds_points = ($row[$startcol + 14] !== null) ? (int) $row[$startcol + 14] : null;
			$this->avg_agent_revenue = ($row[$startcol + 15] !== null) ? (double) $row[$startcol + 15] : null;
			$this->avg_agent_revenue_points = ($row[$startcol + 16] !== null) ? (double) $row[$startcol + 16] : null;
			$this->avg_advert_cost = ($row[$startcol + 17] !== null) ? (double) $row[$startcol + 17] : null;
			$this->avg_advert_cost_points = ($row[$startcol + 18] !== null) ? (double) $row[$startcol + 18] : null;
			$this->avg_active_agent_revernue = ($row[$startcol + 19] !== null) ? (double) $row[$startcol + 19] : null;
			$this->avg_active_agent_revenue_points = ($row[$startcol + 20] !== null) ? (double) $row[$startcol + 20] : null;
			$this->avg_active_advert_cost = ($row[$startcol + 21] !== null) ? (double) $row[$startcol + 21] : null;
			$this->avg_active_advert_cost_points = ($row[$startcol + 22] !== null) ? (double) $row[$startcol + 22] : null;
			$this->avg_click_cost = ($row[$startcol + 23] !== null) ? (double) $row[$startcol + 23] : null;
			$this->avg_click_cost_points = ($row[$startcol + 24] !== null) ? (double) $row[$startcol + 24] : null;
			$this->avg_click_revenue = ($row[$startcol + 25] !== null) ? (double) $row[$startcol + 25] : null;
			$this->avg_click_revenue_points = ($row[$startcol + 26] !== null) ? (double) $row[$startcol + 26] : null;
			$this->arpu = ($row[$startcol + 27] !== null) ? (double) $row[$startcol + 27] : null;
			$this->arpu_points = ($row[$startcol + 28] !== null) ? (double) $row[$startcol + 28] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 29; // 29 = StatMoneyDailyPeer::NUM_COLUMNS - StatMoneyDailyPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating StatMoneyDaily object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(StatMoneyDailyPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = StatMoneyDailyPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(StatMoneyDailyPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseStatMoneyDaily:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				StatMoneyDailyPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseStatMoneyDaily:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(StatMoneyDailyPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseStatMoneyDaily:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseStatMoneyDaily:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				StatMoneyDailyPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = StatMoneyDailyPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = StatMoneyDailyPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += StatMoneyDailyPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = StatMoneyDailyPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = StatMoneyDailyPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getDate();
				break;
			case 2:
				return $this->getTurnover();
				break;
			case 3:
				return $this->getTurnoverPoints();
				break;
			case 4:
				return $this->getRevenue();
				break;
			case 5:
				return $this->getRevenuePoints();
				break;
			case 6:
				return $this->getPayCount();
				break;
			case 7:
				return $this->getAvgCheck();
				break;
			case 8:
				return $this->getAvgCheckPoints();
				break;
			case 9:
				return $this->getIncomingFunds();
				break;
			case 10:
				return $this->getIncomingFundsPoints();
				break;
			case 11:
				return $this->getOutgoingFunds();
				break;
			case 12:
				return $this->getOutgoingFundsPoints();
				break;
			case 13:
				return $this->getDiffFunds();
				break;
			case 14:
				return $this->getDiffFundsPoints();
				break;
			case 15:
				return $this->getAvgAgentRevenue();
				break;
			case 16:
				return $this->getAvgAgentRevenuePoints();
				break;
			case 17:
				return $this->getAvgAdvertCost();
				break;
			case 18:
				return $this->getAvgAdvertCostPoints();
				break;
			case 19:
				return $this->getAvgActiveAgentRevernue();
				break;
			case 20:
				return $this->getAvgActiveAgentRevenuePoints();
				break;
			case 21:
				return $this->getAvgActiveAdvertCost();
				break;
			case 22:
				return $this->getAvgActiveAdvertCostPoints();
				break;
			case 23:
				return $this->getAvgClickCost();
				break;
			case 24:
				return $this->getAvgClickCostPoints();
				break;
			case 25:
				return $this->getAvgClickRevenue();
				break;
			case 26:
				return $this->getAvgClickRevenuePoints();
				break;
			case 27:
				return $this->getArpu();
				break;
			case 28:
				return $this->getArpuPoints();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = StatMoneyDailyPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getDate(),
			$keys[2] => $this->getTurnover(),
			$keys[3] => $this->getTurnoverPoints(),
			$keys[4] => $this->getRevenue(),
			$keys[5] => $this->getRevenuePoints(),
			$keys[6] => $this->getPayCount(),
			$keys[7] => $this->getAvgCheck(),
			$keys[8] => $this->getAvgCheckPoints(),
			$keys[9] => $this->getIncomingFunds(),
			$keys[10] => $this->getIncomingFundsPoints(),
			$keys[11] => $this->getOutgoingFunds(),
			$keys[12] => $this->getOutgoingFundsPoints(),
			$keys[13] => $this->getDiffFunds(),
			$keys[14] => $this->getDiffFundsPoints(),
			$keys[15] => $this->getAvgAgentRevenue(),
			$keys[16] => $this->getAvgAgentRevenuePoints(),
			$keys[17] => $this->getAvgAdvertCost(),
			$keys[18] => $this->getAvgAdvertCostPoints(),
			$keys[19] => $this->getAvgActiveAgentRevernue(),
			$keys[20] => $this->getAvgActiveAgentRevenuePoints(),
			$keys[21] => $this->getAvgActiveAdvertCost(),
			$keys[22] => $this->getAvgActiveAdvertCostPoints(),
			$keys[23] => $this->getAvgClickCost(),
			$keys[24] => $this->getAvgClickCostPoints(),
			$keys[25] => $this->getAvgClickRevenue(),
			$keys[26] => $this->getAvgClickRevenuePoints(),
			$keys[27] => $this->getArpu(),
			$keys[28] => $this->getArpuPoints(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = StatMoneyDailyPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setDate($value);
				break;
			case 2:
				$this->setTurnover($value);
				break;
			case 3:
				$this->setTurnoverPoints($value);
				break;
			case 4:
				$this->setRevenue($value);
				break;
			case 5:
				$this->setRevenuePoints($value);
				break;
			case 6:
				$this->setPayCount($value);
				break;
			case 7:
				$this->setAvgCheck($value);
				break;
			case 8:
				$this->setAvgCheckPoints($value);
				break;
			case 9:
				$this->setIncomingFunds($value);
				break;
			case 10:
				$this->setIncomingFundsPoints($value);
				break;
			case 11:
				$this->setOutgoingFunds($value);
				break;
			case 12:
				$this->setOutgoingFundsPoints($value);
				break;
			case 13:
				$this->setDiffFunds($value);
				break;
			case 14:
				$this->setDiffFundsPoints($value);
				break;
			case 15:
				$this->setAvgAgentRevenue($value);
				break;
			case 16:
				$this->setAvgAgentRevenuePoints($value);
				break;
			case 17:
				$this->setAvgAdvertCost($value);
				break;
			case 18:
				$this->setAvgAdvertCostPoints($value);
				break;
			case 19:
				$this->setAvgActiveAgentRevernue($value);
				break;
			case 20:
				$this->setAvgActiveAgentRevenuePoints($value);
				break;
			case 21:
				$this->setAvgActiveAdvertCost($value);
				break;
			case 22:
				$this->setAvgActiveAdvertCostPoints($value);
				break;
			case 23:
				$this->setAvgClickCost($value);
				break;
			case 24:
				$this->setAvgClickCostPoints($value);
				break;
			case 25:
				$this->setAvgClickRevenue($value);
				break;
			case 26:
				$this->setAvgClickRevenuePoints($value);
				break;
			case 27:
				$this->setArpu($value);
				break;
			case 28:
				$this->setArpuPoints($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = StatMoneyDailyPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setDate($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setTurnover($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setTurnoverPoints($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setRevenue($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setRevenuePoints($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setPayCount($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setAvgCheck($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setAvgCheckPoints($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setIncomingFunds($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setIncomingFundsPoints($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setOutgoingFunds($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setOutgoingFundsPoints($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setDiffFunds($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setDiffFundsPoints($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setAvgAgentRevenue($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setAvgAgentRevenuePoints($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setAvgAdvertCost($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setAvgAdvertCostPoints($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setAvgActiveAgentRevernue($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setAvgActiveAgentRevenuePoints($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setAvgActiveAdvertCost($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setAvgActiveAdvertCostPoints($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setAvgClickCost($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setAvgClickCostPoints($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setAvgClickRevenue($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setAvgClickRevenuePoints($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setArpu($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setArpuPoints($arr[$keys[28]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(StatMoneyDailyPeer::DATABASE_NAME);

		if ($this->isColumnModified(StatMoneyDailyPeer::ID)) $criteria->add(StatMoneyDailyPeer::ID, $this->id);
		if ($this->isColumnModified(StatMoneyDailyPeer::DATE)) $criteria->add(StatMoneyDailyPeer::DATE, $this->date);
		if ($this->isColumnModified(StatMoneyDailyPeer::TURNOVER)) $criteria->add(StatMoneyDailyPeer::TURNOVER, $this->turnover);
		if ($this->isColumnModified(StatMoneyDailyPeer::TURNOVER_POINTS)) $criteria->add(StatMoneyDailyPeer::TURNOVER_POINTS, $this->turnover_points);
		if ($this->isColumnModified(StatMoneyDailyPeer::REVENUE)) $criteria->add(StatMoneyDailyPeer::REVENUE, $this->revenue);
		if ($this->isColumnModified(StatMoneyDailyPeer::REVENUE_POINTS)) $criteria->add(StatMoneyDailyPeer::REVENUE_POINTS, $this->revenue_points);
		if ($this->isColumnModified(StatMoneyDailyPeer::PAY_COUNT)) $criteria->add(StatMoneyDailyPeer::PAY_COUNT, $this->pay_count);
		if ($this->isColumnModified(StatMoneyDailyPeer::AVG_CHECK)) $criteria->add(StatMoneyDailyPeer::AVG_CHECK, $this->avg_check);
		if ($this->isColumnModified(StatMoneyDailyPeer::AVG_CHECK_POINTS)) $criteria->add(StatMoneyDailyPeer::AVG_CHECK_POINTS, $this->avg_check_points);
		if ($this->isColumnModified(StatMoneyDailyPeer::INCOMING_FUNDS)) $criteria->add(StatMoneyDailyPeer::INCOMING_FUNDS, $this->incoming_funds);
		if ($this->isColumnModified(StatMoneyDailyPeer::INCOMING_FUNDS_POINTS)) $criteria->add(StatMoneyDailyPeer::INCOMING_FUNDS_POINTS, $this->incoming_funds_points);
		if ($this->isColumnModified(StatMoneyDailyPeer::OUTGOING_FUNDS)) $criteria->add(StatMoneyDailyPeer::OUTGOING_FUNDS, $this->outgoing_funds);
		if ($this->isColumnModified(StatMoneyDailyPeer::OUTGOING_FUNDS_POINTS)) $criteria->add(StatMoneyDailyPeer::OUTGOING_FUNDS_POINTS, $this->outgoing_funds_points);
		if ($this->isColumnModified(StatMoneyDailyPeer::DIFF_FUNDS)) $criteria->add(StatMoneyDailyPeer::DIFF_FUNDS, $this->diff_funds);
		if ($this->isColumnModified(StatMoneyDailyPeer::DIFF_FUNDS_POINTS)) $criteria->add(StatMoneyDailyPeer::DIFF_FUNDS_POINTS, $this->diff_funds_points);
		if ($this->isColumnModified(StatMoneyDailyPeer::AVG_AGENT_REVENUE)) $criteria->add(StatMoneyDailyPeer::AVG_AGENT_REVENUE, $this->avg_agent_revenue);
		if ($this->isColumnModified(StatMoneyDailyPeer::AVG_AGENT_REVENUE_POINTS)) $criteria->add(StatMoneyDailyPeer::AVG_AGENT_REVENUE_POINTS, $this->avg_agent_revenue_points);
		if ($this->isColumnModified(StatMoneyDailyPeer::AVG_ADVERT_COST)) $criteria->add(StatMoneyDailyPeer::AVG_ADVERT_COST, $this->avg_advert_cost);
		if ($this->isColumnModified(StatMoneyDailyPeer::AVG_ADVERT_COST_POINTS)) $criteria->add(StatMoneyDailyPeer::AVG_ADVERT_COST_POINTS, $this->avg_advert_cost_points);
		if ($this->isColumnModified(StatMoneyDailyPeer::AVG_ACTIVE_AGENT_REVERNUE)) $criteria->add(StatMoneyDailyPeer::AVG_ACTIVE_AGENT_REVERNUE, $this->avg_active_agent_revernue);
		if ($this->isColumnModified(StatMoneyDailyPeer::AVG_ACTIVE_AGENT_REVENUE_POINTS)) $criteria->add(StatMoneyDailyPeer::AVG_ACTIVE_AGENT_REVENUE_POINTS, $this->avg_active_agent_revenue_points);
		if ($this->isColumnModified(StatMoneyDailyPeer::AVG_ACTIVE_ADVERT_COST)) $criteria->add(StatMoneyDailyPeer::AVG_ACTIVE_ADVERT_COST, $this->avg_active_advert_cost);
		if ($this->isColumnModified(StatMoneyDailyPeer::AVG_ACTIVE_ADVERT_COST_POINTS)) $criteria->add(StatMoneyDailyPeer::AVG_ACTIVE_ADVERT_COST_POINTS, $this->avg_active_advert_cost_points);
		if ($this->isColumnModified(StatMoneyDailyPeer::AVG_CLICK_COST)) $criteria->add(StatMoneyDailyPeer::AVG_CLICK_COST, $this->avg_click_cost);
		if ($this->isColumnModified(StatMoneyDailyPeer::AVG_CLICK_COST_POINTS)) $criteria->add(StatMoneyDailyPeer::AVG_CLICK_COST_POINTS, $this->avg_click_cost_points);
		if ($this->isColumnModified(StatMoneyDailyPeer::AVG_CLICK_REVENUE)) $criteria->add(StatMoneyDailyPeer::AVG_CLICK_REVENUE, $this->avg_click_revenue);
		if ($this->isColumnModified(StatMoneyDailyPeer::AVG_CLICK_REVENUE_POINTS)) $criteria->add(StatMoneyDailyPeer::AVG_CLICK_REVENUE_POINTS, $this->avg_click_revenue_points);
		if ($this->isColumnModified(StatMoneyDailyPeer::ARPU)) $criteria->add(StatMoneyDailyPeer::ARPU, $this->arpu);
		if ($this->isColumnModified(StatMoneyDailyPeer::ARPU_POINTS)) $criteria->add(StatMoneyDailyPeer::ARPU_POINTS, $this->arpu_points);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(StatMoneyDailyPeer::DATABASE_NAME);

		$criteria->add(StatMoneyDailyPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of StatMoneyDaily (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setDate($this->date);

		$copyObj->setTurnover($this->turnover);

		$copyObj->setTurnoverPoints($this->turnover_points);

		$copyObj->setRevenue($this->revenue);

		$copyObj->setRevenuePoints($this->revenue_points);

		$copyObj->setPayCount($this->pay_count);

		$copyObj->setAvgCheck($this->avg_check);

		$copyObj->setAvgCheckPoints($this->avg_check_points);

		$copyObj->setIncomingFunds($this->incoming_funds);

		$copyObj->setIncomingFundsPoints($this->incoming_funds_points);

		$copyObj->setOutgoingFunds($this->outgoing_funds);

		$copyObj->setOutgoingFundsPoints($this->outgoing_funds_points);

		$copyObj->setDiffFunds($this->diff_funds);

		$copyObj->setDiffFundsPoints($this->diff_funds_points);

		$copyObj->setAvgAgentRevenue($this->avg_agent_revenue);

		$copyObj->setAvgAgentRevenuePoints($this->avg_agent_revenue_points);

		$copyObj->setAvgAdvertCost($this->avg_advert_cost);

		$copyObj->setAvgAdvertCostPoints($this->avg_advert_cost_points);

		$copyObj->setAvgActiveAgentRevernue($this->avg_active_agent_revernue);

		$copyObj->setAvgActiveAgentRevenuePoints($this->avg_active_agent_revenue_points);

		$copyObj->setAvgActiveAdvertCost($this->avg_active_advert_cost);

		$copyObj->setAvgActiveAdvertCostPoints($this->avg_active_advert_cost_points);

		$copyObj->setAvgClickCost($this->avg_click_cost);

		$copyObj->setAvgClickCostPoints($this->avg_click_cost_points);

		$copyObj->setAvgClickRevenue($this->avg_click_revenue);

		$copyObj->setAvgClickRevenuePoints($this->avg_click_revenue_points);

		$copyObj->setArpu($this->arpu);

		$copyObj->setArpuPoints($this->arpu_points);


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     StatMoneyDaily Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     StatMoneyDailyPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new StatMoneyDailyPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseStatMoneyDaily:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseStatMoneyDaily::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseStatMoneyDaily
